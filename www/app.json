{
    /**
     * 应用程序命名
     */
    "name": "app",
    /**
     * 应用程序的命名空间
     */
    "namespace": "app",
    /**
     * 应用程序的版本
     */
    "version": "1.0.0.0",
    "framework": "ext",
    /**
     * 可以指定打包模式 "classic" or "modern".
     */
    "toolkit": "classic",
    /**
     * 应用的主题名称，不要随便乱写
     */
    "theme": "theme-triton",
    /**
     * 需要的扩展包 ( 默认是最新的).
     * ext-locale 引入语言包
     * font-awesome 字体图标
     * ux ext扩展包
     * charts 图表扩展包
     * 例如,
     *
     *      "requires": [
     *          "charts"
     *      ]
     */
    "requires": [
        "font-awesome",
        "ext-locale",
        "ux",
        "charts"
    ],
    /**
     * 中文
     */
    "locale": "zh_CN",
    /**
     * 起始页面名称（后缀可以是HTML，JSP，ASP等）。
     */
    "indexHtmlPath": "index.html",
    /**
     * 项目文件路径
     */
    "classpath": [
        "app"
    ],
    /**
     * 重写类文件目录路径
     */
    "overrides": [
        "overrides"
    ],
    /**
     * Fashion build configuration properties.
     */
    "fashion": {
        "missingParameters": "error",
        "inliner": {
            /**
             * Disable resource inliner. Production builds enable this by default.
             */
            "enable": false
        }
    },
    /**
     * Sass 相关配置.
     */
    "sass": {
        /**
         * The root namespace to use when mapping *.scss files to classes in the
         * sass/src and sass/var directories. For example, "app.view.Foo" would
         * map to "sass/src/view/Foo.scss". If we changed this to "app.view" then
         * it would map to "sass/src/Foo.scss". To style classes outside the app's
         * root namespace, change this to "". Doing so would change the mapping of
         * "app.view.Foo" to "sass/src/app/view/Foo.scss".
         */
        "namespace": "app",
        /**
         * Generated sass source settings
         *
         *      "generated": {
         *         // The file used to save sass variables edited via Sencha Inspector and Sencha Themer.
         *         // This file will automatically be applied to the end of the scss build.
         *         "var": "sass/save.scss",
         *      
         *         // The directory used to save generated sass sources.
         *         // This directory will automatically be applied to the end of the scss build.
         *         "src": "sass/save"
         *      }
         *
         */
        "generated": {
            "var": "sass/save.scss",
            "src": "sass/save"
        },
        /**
         * Comma-separated list of files or folders containing extra Sass. These
         * files are automatically included in the Sass compilation. By default this
         * is just "etc/all.scss" to allow import directives to control the order
         * other files are included.
         *
         * All "etc" files are included at the top of the Sass compilation in their
         * dependency order:
         *
         *      +-------+---------+
         *      |       | base    |
         *      | theme +---------+
         *      |       | derived |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         *      | application     |
         *      +-----------------+
         */
        "etc": [
            "sass/etc/all.scss"
        ],
        /**
         * Comma-separated list of folders containing Sass variable definitions
         * files. These file can also define Sass mixins for use by components.
         *
         * All "var" files are included after "etc" files in the Sass compilation in
         * dependency order:
         *
         *      +-------+---------+
         *      |       | base    |
         *      | theme +---------+
         *      |       | derived |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         *      | application     |
         *      +-----------------+
         *
         * The "sass/var/all.scss" file is always included at the start of the var
         * block before any files associated with JavaScript classes.
         */
        "var": [
            "sass/var/all.scss",
            "sass/var"
        ],
        /**
         * Comma-separated list of folders containing Sass rule files.
         *
         * All "src" files are included after "var" files in the Sass compilation in
         * dependency order (the same order as "etc"):
         *
         *      +-------+---------+
         *      |       | base    |
         *      | theme +---------+
         *      |       | derived |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         *      | application     |
         *      +-----------------+
         */
        "src": [
            "sass/src"
        ]
    },
    /**
     * 所需引用js文件
     * 单个格式如下
     *
     *      {
     *         // 文件路径，如果本地文件，路径相对于此app.json文件
     *          //
     *          "path": "path/to/script.js",   // REQUIRED
     *
     *          // 设置为true，表示所有的类生成到这个文件
     *          "bundle": false,    // OPTIONAL
     *
     *          // Set to true to include this file in the concatenated classes.
     *          //
     *          "includeInBundle": false,  // OPTIONAL
     *
     *          //设置为true,表示这个文件是一个远程文件不会被复制，默认false
     *          "remote": false,    // OPTIONAL
     *
     *          // 如果没有指定，这个文件将只加载一次，
     *          // 缓存到localStorage里面，直到这个值被改变。
     *          //
     *          //   - "delta" 增量更新此文件
     *          //   - "full" 当文件改变时，完全更新此文件
     *          //
     *          "update": "",        // OPTIONAL
     *
     *          // 设置为true，表示这是项目依赖文件。
     *          // 该文件不会被复制到生成目录或引用
     *          "bootstrap": false   // OPTIONAL
     *      }
     *
     */
    "js": [
        //{
        //  "path": "${framework.dir}/build/ext-all-rtl-debug.js"
        //},
        {
            "path": "app.js",
            "bundle": true
        },
        {
            "path": "resources/js/echarts.min.js",
            "remote": true
        }
    ],
    /**
     * 所需引用css文件
     * 单个格式如下
     *
     *      {
     *          // 文件路径，如果本地文件，路径相对于此app.json文件
     *          //
     *          "path": "path/to/stylesheet.css",   // REQUIRED
     *
     *          //设置为true,表示这个文件是一个远程文件不会被复制，默认false
     *          "remote": false,    // OPTIONAL
     *
     *          // 如果没有指定，这个文件将只加载一次，
     *          // 缓存到localStorage里面，直到这个值被改变。
     *          //
     *          //   - "delta" 增量更新此文件
     *          //   - "full" 当文件改变时，完全更新此文件
     *          //
     *          "update": ""      // OPTIONAL
     *      }
     */
    "css": [{
        // this entry uses an ant variable that is the calculated
        // value of the generated output css file for the app,
        // defined in .sencha/app/defaults.properties
        "path": "${build.out.css.path}",
        "bundle": true,
        "exclude": [
            "fashion"
        ]
    }],
    /**
     * 应用加载配置
     *
     */
    "loader": {
        // 缓存配置
        //
        //   - true: 允许缓存
        //   - false: 禁用缓存
        //   - other:不明白
        //
        "cache": false,
        // 缓存没有启用时传递的参数
        "cacheParam": "_dc"
    },
    /**
     * 打包命令相关配置
     */
    "production": {
        "output": {
            //打包输出位置
            //直接写在最外层output.base配置中会导致通过sencha app watch命令生成的站点无法访问css资源
            //写在这里就不会有这个问题
            "base": "../docs",
            "appCache": {
                "enable": true,
                "path": "cache.appcache"
            }
        },
        "loader": {
            "cache": "${build.timestamp}"
        },
        "cache": {
            "enable": true
        },
        "compressor": {
            "type": "yui"
        }
    },
    /**
     * Settings specific to testing builds.
     */
    "testing": {},
    /**
     * Settings specific to development builds.
     */
    "development": {
        "watch": {
            "delay": 250
        }
    },
    /**
     * Controls the output structure of development-mode (bootstrap) artifacts. May
     * be specified by a string:
     *
     *      "bootstrap": "${app.dir}"
     *
     * This will adjust the base path for all bootstrap objects, or expanded into object
     * form:
     *
     *      "bootstrap": {
     *          "base": "${app.dir}",
     *          "manifest": "bootstrap.json",
     *          "microloader": "bootstrap.js",
     *          "css": "bootstrap.css"
     *      }
     *
     * You can optionally exclude entries from the manifest. For example, to exclude
     * the "loadOrder" (to help development load approximate a build) you can add:
     *
     *      "bootstrap": {
     *          "manifest": {
     *              "path": "bootstrap.json",
     *              "exclude": "loadOrder"
     *          }
     *      }
     *
     */
    "bootstrap": {
        "base": "${app.dir}",
        "microloader": "bootstrap.js",
        "css": "bootstrap.css"
    },
    /**
     * Controls the output directory for build resources.  May be set with
     * either a string:
     *
     *      "${workspace.build.dir}/${build.environment}/${app.name}"
     *
     * or an object containing values for various types of build artifacts:
     *
     *      {
     *          "base": "${workspace.build.dir}/${build.environment}/${app.name}",
     *          "page": {
     *              "path": "../index.html",
     *              "enable": false
     *          },
     *          "css": "${app.output.resources}/${app.name}-all.css",
     *          "js": {
     *              "path": "app.js",
     *              // This setting constrols the output language level.  Set to 'ES6' to 
     *              // disable the transpiler
     *              "version": "ES5"
     *          },
     *          "microloader": {
     *              "path": "microloader.js",
     *              "embed": true,
     *              "enable": true
     *          },
     *          "manifest": {
     *              "path": "app.json",
     *              "embed": false,
     *              "enable": "${app.output.microloader.enable}"
     *          },
     *          "resources": "resources",
     *          "slicer": {
     *              "path": "${app.output.resources}/images",
     *              "enable": false
     *          },
     *          // Setting the "enable" property of this object to a Truthy value will cause a Application Cache
     *          // manifest file to be generated based on this files appCache object. This file will then be injected
     *          // into the index.html file of the built application
     *          "appCache":{
     *              "enable": false"
     *          }
     *      }
     *
     */
    "output": {

        "base": "${workspace.build.dir}/${build.environment}/${app.name}",

        "appCache": {
            "enable": false
        }
    },
    /**
     *  缓存配置
     *   "cache": {
     *       // 是否禁用缓存，为true将全局禁用
     *       "enable": false,
     *
     *       // 全局配置
     *       // 设置为deltas，或者true表示增量更新
     *       // 不设置或者为false将禁用
     *       "deltas": "deltas"
     *   }
     */
    "cache": {
        "enable": false,
        "deltas": true
    },
    /**
     * 自动生成的缓存文件配置
     */
    "appCache": {
        /**
         * 缓存目标
         */
        "cache": [
            "index.html"
        ],
        /**
         * 作用目录
         */
        "network": [
            "*"
        ],
        /**
         * List of items in the FALLBACK section
         */
        "fallback": []
    },
    /**
     * 项目生成时需要复制的资源文件
     */
    "resources": [{
        "path": "resources",
        "output": "shared"
    }],
    /**
     * Directory path to store all previous production builds. Note that the content
     * generated inside this directory must be kept intact for proper generation of
     * deltas between updates.
     */
    "archivePath": "archive",
    /**
     * Additional resources used during theme slicing operations
     */
    "slicer": {
        "js": [{
            "path": "sass/example/custom.js",
            "isWidgetManifest": true
        }],
        "output": {
            "appCache": {
                "enable": false
            }
        },
        "cache": {
            "enable": false
        }
    },
    /**
     * Build Profiles. This object's properties are each a "build profile". You can
     * add as many as you need to produce optimized builds for devices, themes, locales
     * or other criteria. Your "Ext.beforeLoad" hook (see index.html) is responsible for
     * selecting the desired build profile by setting "Ext.manifest" to one of these
     * names.
     *
     */
    /**
     * 打包时忽略对象的正则表达式
     */
    "ignore": [
        "(^|/)CVS(/?$|/.*?$)"
    ],
    /**
     * 唯一ID，作为localStorage前缀。
     * 通常情况下，你不应该改变这个值。
     */
    "id": "1900dd7d-7922-4a63-a091-ff81f79d5617"
}